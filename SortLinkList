
class Node(object):
    def __init__(self,data):
        self.data = data
        self.next = None



class buildList(object):
     def __init__(self):
         self.root = None

     def _add(self,node,data):
         if not node.next:
             nnode = Node(data)
             node.next = nnode
         else:
             self._add(node.next,data)

     def addNode(self,data):
         if not self.root:
             nnode = Node(data)
             self.root = nnode
         else:
             self._add(self.root,data)


     def getRoot(self):
         return self.root

     def ppnode(self,node):
         if node:
             print node.data
             self.ppnode(node.next)


     def isort(self,n_stack):
        #pdb.set_trace()
        for i in range(1,len(n_stack)):
           j = i - 1
           while n_stack[i].data < n_stack[j].data  and j >= 0:
               n_stack[i].data,n_stack[j].data = n_stack[j].data,n_stack[i].data
               j -= 1
               i -=1
        while (len(n_stack) >0):
            print n_stack.pop().data



     def sortList(self,node):

         if node:
             curr = node
             n_stack = []

             while(curr):
                 n_stack.append(curr)
                 curr = curr.next
             self.isort(n_stack)




obj = buildList()
obj.addNode(10)
obj.addNode(40)
obj.addNode(53)
obj.addNode(30)
obj.addNode(67)
obj.addNode(12)
obj.addNode(89)

root = obj.getRoot()
print "Printing the Link list"
obj.ppnode(root)
print "List in sorted order"
obj.sortList(root)
